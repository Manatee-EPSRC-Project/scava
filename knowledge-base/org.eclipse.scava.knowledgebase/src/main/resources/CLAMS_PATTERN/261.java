{
    List<KnowledgePackage> pkgs;
    final ProcessEventListener processEventListener;
    final List<ProcessEvent> processEventList;
    RuleFlowProcess process;
    KnowledgeBase kbase = KnowledgeBaseFactory.newKnowledgeBase();

    final Package pkg = new Package(  " a string "  );
    pkg.addProcess(process);
    pkgs.add( new KnowledgePackageImp( pkg ) );
    kbase.addKnowledgePackages( pkgs );

    StatefulKnowledgeSession session = kbase.newStatefulKnowledgeSession();
    session.addEventListener( processEventListener );

    session.startProcess( " a string " );
    assertEquals(  " a string " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());
    assertEquals(  " a string " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());
    assertEquals(  " a string " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());
    assertEquals(  " a string " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());
    assertEquals(  " a string " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());
}    final Package pkg = new Package(  "  " a string "  "  );    session.startProcess( "  " a string "  " );    assertEquals(  "  " a string "  " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  " a string "  " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    final Package pkg = new Package(  "  " a string "  "  );    session.startProcess( "  " a string "  " );    assertEquals(  "  " a string "  " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  " a string "  " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  " a string "  " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());}    final Package pkg = new Package(  "  "  " a string "  "  "  );    session.startProcess( "  "  " a string "  "  " );    assertEquals(  "  "  " a string "  "  " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  "  " a string "  "  " , ((ProcessCompletedEvent) processEventList.get(number)).getProcessInstance().getProcessId());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeLeftEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessNodeTriggeredEvent) processEventList.get(number)).getNodeInstance().getNodeName());    assertEquals(  "  "  " a string "  "  " , ((ProcessStartedEvent) processEventList.get(number)).getProcessInstance().getProcessId());
