from org.eclipse.scava.crossflow.runtime import convert
from org.eclipse.scava.crossflow.runtime import Task

from [%=w.package%].[%=w.name%] import [%=w.name%]

from org.eclipse.scava.crossflow.runtime import Mode

from functools import reduce
import multiprocessing
import uuid
import sys

import argparse

import threading

class WorkflowThread():

	def __init__(self, workflow, delay):
		self.workflow = workflow
		self.delay = delay
		
	def run(self):
		self.workflow.run(self.delay)


class Composite[%=w.name%](object):
	
	def __init__(self, parsedArgs):
		# default parallel instances on each node equal to the number of virtual cores
		# on the machine
		# @Parameter(names =  "-parallelization" , description = "The paralellization of the workflow, defaults to the number of virtual cores of the machine")	
		self.parallelization = multiprocessing.cpu_count()
		if parsedArgs.parallelization != None:
			self.parallelization = parsedArgs.parallelization
	
		self.elements = []
	
		# @Parameter(names =  "-name" , description = "The name of the workflow")
		self.name = ""
		if parsedArgs.name != None:
			self.name = parsedArgs.name
	
		# @Parameter(names =  "-master" , description = "IP of the master")
		self.master = "localhost"
		if parsedArgs.master != None:
			self.master = parsedArgs.master
	
		# @Parameter(names =  "-port" , description = "Port of the master")
		self.port = 61616
		if parsedArgs.port != None:
			self.port = parsedArgs.port
	
		# @Parameter(names =  "-instance" , description = "The instance of the master (to contribute to)")
		self.instanceId = str(uuid.uuid4())
		if parsedArgs.instance != None:
			self.instanceId = parsedArgs.instance
	
		# @Parameter(names =  "-mode" , description = "Must be master_bare, master or worker", converter = ModeConverter.class)
		self.mode = Mode.MASTER
		if parsedArgs.mode != None:
			self.mode = convert(parsedArgs.mode)
	
		# @Parameter(names =  "-createBroker" , description = "Whether this workflow creates a broker or not.", arity = 1)
		self.createBroker = True
		if parsedArgs.createBroker != None:
			self.createBroker = parsedArgs.createBroker
	
		self.cacheEnabled = True
		self.enablePrefetch = False

		org_name = self.name+":Composite[%=w.name%]:"+self.mode
		originatingWf = [%=w.name%](mode=self.mode, name=org_name, createBroker=self.createBroker)
		self.elements.append(originatingWf);
		
		for i in range(1, self.parallelization):
			spawnedWf = [%=w.name%](mode=Mode.WORKER, name=originatingWf.getName()+":SPAWN:"+i);
			self.elements.append(spawnedWf);

	'''
	 * 
	 * @return The elements of this composite, in order
	'''
	def getElements(self):
		return self.elements



	def getMode(self):
		return self.mode
	
	
	def getParallelization(self):
		return self.parallelization
	


	def run(self, delay, masterOnlyDelay):
		for e in self.elements:
			e.setMaster(self.master)
		for e in self.elements:
			e.setEnablePrefetch(self.enablePrefetch)
		for e in self.elements:
			e.set_instanceId(self.instanceId)
		for e in self.elements:
			wfDelay = delay
			if self.masterOnlyDelay:
				if not e.is_master():
					wfDelay = 0
			WorkflowThread(e, wfDelay).start()
	
		
	def getInstanceId(self):
		return self.instanceId

	def setInstanceId(self, instanceId): 
		self.instanceId = instanceId
	
	
	def hasTerminated(self):
		return reduce((lambda e : e.hasTerminated()), self.elements.stream())

	def isEnablePrefetch(self): 
		return self.enablePrefetch
	

	def setEnablePrefetch(self, enablePrefetch):
		self.enablePrefetch = enablePrefetch
	
	
	def getMaster(self): 
		return self.master
	

	def setMaster(self, master): 
		self.master = master
	
	
	def getName(self) :
		return self.name
	
	
	def isCreateBroker(self):
		return self.createBroker
	

	def createBroker(self, createBroker): 
		self.createBroker = createBroker
	
	


if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	parser.add_argument('-mode', help='Must be master_bare, master or worker')
	parser.add_argument('-parallelization', help='The paralellization of the workflow, defaults to the number of virtual cores of the machine')
	parser.add_argument('-name', help='The name of the workflow')
	parser.add_argument('-master', help='IP of the master')
	parser.add_argument('-port', type=int, help='Port of the master')
	parser.add_argument('-instance', help='The instance of the master (to contribute to)')
	parser.add_argument('-createBroker', help='Whether this workflow creates a broker or not.')
	
	parsedArgs = parser.parse_args(sys.argv[1:len(sys.argv)])
	
	composite = Composite[%=w.name%](parsedArgs)
	composite.run()
