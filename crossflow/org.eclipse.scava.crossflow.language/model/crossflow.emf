@gmf
@namespace(uri="org.eclipse.scava.crossflow", prefix="cf")
package crossflow;

@gmf.diagram(onefile="true")
class Workflow {
  val Configuration[1] configuration;
  attr String name;
  attr String ~package;
  val Stream[*] streams;
  val Task[*] tasks;
  val Type[*] types;
  val Field[*] parameters;
}

@gmf.node(label.placement="none", figure="ellipse")
abstract class Stream {
  attr String name;

  @gmf.link
  ref Type type;
  ref Task[*]#input inputOf;
  ref Task[*]#output outputOf;
}

class Topic extends Stream {
}

class Queue extends Stream {
}

@gmf.node(label="name")
class Task {
  attr String name;

  @gmf.link
  ref Stream[*]#inputOf input;

  @gmf.link
  ref Stream[*]#outputOf output;
  attr Boolean masterOnly = "false";
  attr Boolean parallel;
  attr Boolean cached;
}

class Source extends Task {
}

class CsvSource extends Source {
  attr String path;
}

class Sink extends Task {
}

class CsvSink extends Sink {
  attr String path;
}

@gmf.node(label="name")
class Type {
  attr String name;
  attr String impl;
  attr boolean[1] isMany;

  @gmf.link
  ref Type[*] extending;

  @gmf.compartment
  val Field[*] fields;
}

@gmf.node(label="name", label.pattern="{0}")
class Field {
  attr String name;
  attr String type;
  attr boolean many = false;
}

@gmf.node(label="numberOfWorkers,isMasterAlsoWorker", label.pattern="Config: NoW:{0}, iMaW:{1}")
class Configuration {
  attr Integer numberOfWorkers;
  attr Boolean isMasterAlsoWorker;
  attr String[1] rootPackageName;
  attr String[1] projectName;
}

