package [%=t.eContainer().package%];

import java.io.Serializable;
import java.util.UUID;
import org.eclipse.scava.crossflow.runtime.Job;
import java.util.List;
import java.util.ArrayList;
import java.io.Serializable;

public class [%=t.name%] [%if(Stream.all.exists(s|s.type=t)){%] extends Job [%}else{%] implements Serializable [%}%] {
	
	public [%=t.name%]() {}
	
	public [%=t.name%]([%=t.fields.collect(f|f.getJavaType() + " " + f.name).concat(", ")%]) {
		[%for (f in t.fields) { %]
		this.[%=f.name%] = [%=f.name%];
		[%}%]
	}
	
	[%for (f in t.fields) { %]
	protected [%=f.getJavaType()%] [%=f.name%] [%if(f.many){%]= new ArrayList<>()[%}%];
	
	public void set[%=f.name.ftuc()%]([%=f.getJavaType()%] [%=f.name%]) {
		this.[%=f.name%] = [%=f.name%];
	}
	
	public [%=f.getJavaType()%] get[%=f.name.ftuc()%]() {
		return [%=f.name%];
	}
	
	[%}%]
	
	public Object[] toObjectArray(){
		Object[] ret = new Object[[%=t.fields.size%]];
	[%var i = 0; for (f in t.fields) { %]
	 	ret[[%=i%]] = get[%=f.name.ftuc()%]();
	[%i++;}%]
		return ret;
	}

}

[%operation Field getJavaType() {
	if (self.many) {
		return "List<" + self.type + ">";
	}
	else {
		return self.type;
	}
}%]