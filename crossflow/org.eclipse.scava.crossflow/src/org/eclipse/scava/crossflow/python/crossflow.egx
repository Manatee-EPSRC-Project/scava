import '../util.eol';

rule Workflow2Class 
	transform w : Workflow {
	
	parameters : Map {
		"package" = w.getPackage()
	}
	
	template : "workflow2class.egl"
	
	target : w.getPath() + w.name + ".py"
}

rule Type2Class 
	transform t : Type {
	
	guard : t.impl.isUndefined()
	
	parameters : Map {
	   "package" = t.getPackage()
	}
	
	template : "type2class.egl"
	
	target : t.getPath() + t.name + ".py"
}

@greedy
rule Task2BaseClass 
	transform t : Task {

	guard : t.appliesTo()
	
	parameters : Map {
		"w" = t.getWorkflow(),
		"package" = t.getPackage(),
		"outputTypes" = t.getOutputTypes()
	}
	
	template : "task2baseclass.egl"
	
	target : t.getPath() + t.name + "Base.py"	
}

@greedy
rule Task2ImplClass 
	transform t : Task {
		
	guard : t.appliesTo()
		
	parameters : Map {
		"w" = t.getWorkflow(),
		"package" = t.getPackage(),
		"outputTypes" = t.getOutputTypes()
	}
	
	template : "task2implclass.egl"
	
	target : t.getImplPath() + t.name + ".py"
	
	overwrite : false
}
@greedy
rule Steam2Class 
	transform s : Stream {
	
	parameters : Map {
		"w" = s.getWorkflow()
	}
	
	template : "stream2class.egl"
	
	target : s.getPath() + s.name + ".py"
}

@greedy
rule Steam2Consumer 
	transform s : Stream {
	
	parameters : Map {
		"t" = Task
	}
	
	template : "stream2consumer.egl"
	
	target : s.getPath() + s.name + "Consumer.py"
}


rule GenerateRequirementsTxt
	transform w : Workflow {
	
	template: "requirements.txt"
	
	target: w.getOutputFolder() + "/requirements.txt"
}

rule GenerateMain
	transform w : Workflow {
	
	parameters : Map {
		"package" = w.getPackage()
	}
	
	template: "generateMain.egl"
	
	target: w.getOutputFolder() + "/main.py"	
}

rule GenerateRuntime
	transform w : Workflow {
	
	template: "runtime.py"
	
	target: w.getGenOutputFolder() + "/org.eclipse.scava.crossflow".toPath() + "/runtime.py"
}

rule GenerateBXStream
	transform w : Workflow {
	
	template: "basic_xstream.py"
	
	target: w.getGenOutputFolder() + "/org.eclipse.scava.crossflow.utils".toPath() + "/basic_xstream.py"
}

operation Any getPackage() : String {
	return self.getLanguage("python").package;
}

operation Any getGenOutputFolder() : String {
	var genOutputFolder = self.getLanguage("python").genOutputFolder;
	if (genOutputFolder.isDefined()) {
		return genOutputFolder;
	}
	return "py-gen";
}

operation Any getOutputFolder() : String {
	var outputFolder = self.getLanguage("python").outputFolder;
	if (outputFolder.isDefined()) {
		return outputFolder;
	}
	return "py";
}

operation Any getPath() : String {
	return self.getGenOutputFolder() + "/" + self.getPackage().toPath() + "/runtime/";
}

operation Any getImplPath() : String {
	return self.getOutputFolder() + "/" + self.getPackage().toPath();
}

operation Any getSupportPath() {
}

operation String toPath() : String {
	return self.replaceAll("\\.", "/") + "/";
}

operation Task appliesTo() : Boolean {
	return self.hasLanguage("python");
}

operation Task getOutputTypes() : Set {
	return self.output.collect(o|o.type).asSet();
}