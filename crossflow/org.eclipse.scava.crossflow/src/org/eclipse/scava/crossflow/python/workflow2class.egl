[%import "../util.eol";
import "pythonUtil.eol";%]
import argparse
import sys
import time

# Tasks
[%for (t in w.getPyTasks()) {%]
from [%=package%].[%=t.pyVarName()%] import [%=t.name%]
[%}%]

# Types
[%for (t in w.types) {%]
from crossflow.[%=package%].[%=t.pyVarName()%] import [%=t.name%]
[%}%]

# Streams
[%for (s in w.streams) {
	if(not s.inputOf.isEmpty()) {%]
from crossflow.[%=package%].[%=s.pyVarName()%] import [%=s.name%]
[%	}
}%]

# Utility
from crossflow.[%=package%].[%=w.pyVarName()%]_tasks import [%=w.name%]Tasks
from crossflow.runtime import BuiltinStream, Mode, Workflow


class [%=w.name%](Workflow):
    """NOTE: Auto-generated by [%=genRule%][%if (genDate.isDefined()) {%] on [%=genDate%][%}%]
    
    Do not edit this class manually
    """

    def __init__(self,
                 name='',
                 cache=None,
                 brokerHost='localhost',
                 stompPort=61613,
                 instanceId=None,
                 mode=Mode.WORKER,
                 cacheEnabled=True,
                 deleteCache=None,
                 excluded_tasks=[]):
                 
        super().__init__(name=name,
                         cache=cache,
                         brokerHost=brokerHost,
                         stompPort=stompPort,
                         instanceId=instanceId,
                         mode=mode,
                         cacheEnabled=cacheEnabled,
                         deleteCache=deleteCache,
                         excluded_tasks=excluded_tasks)
        
        # Register types with serializer
        [%for (t in w.types) {%]
        self.serializer.register([%=t.name%])
        [%}%]
        
        # Streams
        [%for (s in w.streams) { %]
        self.[%=s.name.ftlc()%]: [%=s.pyType()%] = None
        [%}%]

        # Tasks
        [%for (t in w.tasks) {%]
        [%if (t.isPyTask()) {%]
        self.[%=t.name.ftlc()%] = None
        [%}%]
        [%}%]
        
        # Task creation
        self.tasks = []
        [%for (t in w.getPyTasks()){%]
        if [%=w.name%]Tasks.[%=t.name.toSnakeCaseUpper()%] not in self.excluded_tasks:
            self.[%=t.name.ftlc()%] = [%=t.name%]()
            self.[%=t.name.ftlc()%].workflow = self
            self.tasks.append(self.[%=t.name.ftlc()%])
        [%}%]

    def createWorker(self):
        worker = [%=w.name%](Mode.WORKER)
        worker.setInstanceId(self.instanceId)
        return worker

    [%for (p in w.parameters) { %]
    def set[%=p.name.ftuc()%](self, [%=p.name%]):
        self.[%=p.name%] = [%=p.name%]

    def get[%=p.name.ftuc()%](self):
        return self.[%=p.name%]
        
    [%}%]

    """
     * Run with initial delay in ms before starting execution (after creating broker
     * if master)
     * 
     * @param delay
    """
    def run(self, delay=0):
        """Run with an initial delay before starting execution

        :param delay: delay in ms before this worker will start running. Defaults to 0
        :type delay: int
        """
        self.delay=delay

        try:
            time.sleep(delay)
            self.connect()
            
            # Initialise Streams
            [%for (s in w.streams) {%]
            [%=s.genInitStream()%]
            
            [%}%]

            if (self.is_worker()):
            [%for (t in w.getPyTasks()){%]
                if not [%=w.name%]Tasks.[%=t.name.toSnakeCaseUpper()%] in self.excluded_tasks:
                    [%=t.setup()%]
            [%}%]

        except Exception as e:
            self.local_logger.exception("")

    [%for (s in w.streams) { %]
    def get[%=s.name%](self) -> [%=s.pyType()%]:
        return self.[%=s.name.ftlc()%]
        
    [%}%]
    [%for (t in w.tasks) {%]
    def get[%=t.name%](self):
        return self.[%=t.name.ftlc()%]
        
    [%}%]
    def isEnablePrefetch(self):
        """Are tasks allowed to obtain more jobs while already executing
        :rtype: boolean
        """
        return self.enablePrefetch

    def setEnablePrefetch(self, enablePrefetch):
        self.enablePrefetch = enablePrefetch
        
    def excluded_tasks(self, tasks=[]):
        assert isinstance(tasks, list)
        assert not tasks or [t for t in tasks if isinstance(t, [%=w.name%]Tasks)]
        self.excluded_tasks = tasks

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-name', default='[%=w.name%]Python', help='The name of the workflow')
    parser.add_argument('-brokerHost', default='localhost', help='Host of the JMX broker')
    parser.add_argument('-stompPort', default=61613, help='Port to use for stomp based messages')
    parser.add_argument('-instance', default=None, help='The instance of the master (to contribute to)')
    parser.add_argument('-mode', default='WORKER', help='must be one of WORKER or API')
    
    parsedArgs = parser.parse_args(sys.argv[1:len(sys.argv)])
    
    app = [%=w.name%](name=parsedArgs.name,
                      brokerHost=parsedArgs.brokerHost,
                      stompPort=parsedArgs.stompPort,
                      instanceId=parsedArgs.instance,
                      mode=Mode.enum_from_name(parsedArgs.mode))
                      
    app.run();
    
[%
@template
operation Task setup() {%]
    [%for (i in self.input) { %]
    self.[%=i.name.ftlc()%].addConsumer(self.[%=self.name.ftlc()%], "[%=self.name%]");            
    [%}%]
    [%for (o in self.output) { %]
    self.[%=self.name.ftlc()%].set[%=o.name%](self.[%=o.name.ftlc%]);
    [%}%]
[%}

@template
operation Stream genInitStream() {
	if (self.inputOf.isEmpty()) {
		if (self.isTypeOf(Topic)) {self.~broadcast="True";} else {self.~broadcast="False";}%]
self.[%=self.name.ftlc()%] = BuiltinStream(self, "[%=self.name%]", broadcast=[%=self.~broadcast%])
self.[%=self.name.ftlc()%].init()
	[%} else {%]
self.[%=self.name.ftlc()%] = [%=self.name%](self, self.enablePrefetch)
	[%}%]
self.activeStreams.append(self.[%=self.name.ftlc()%])
[%}%]