import argparse
import sys
import time
import traceback

from org.eclipse.scava.crossflow.runtime import ControlSignal
from org.eclipse.scava.crossflow.runtime import ControlSignals
from org.eclipse.scava.crossflow.runtime import Workflow
from org.eclipse.scava.crossflow.runtime import Mode

[%for (t in w.getMasterTasks()){%]
from [%=package%].[%=t.name%] import [%=t.name%]
[%}%]
[%for (t in w.getWorkerTasks()){%]
from [%=package%].[%=t.name%] import [%=t.name%]
[%}%]
[%for (s in w.streams) { %]
from [%=package%].runtime.[%=s.name%] import [%=s.name%]
[%}%]


class [%=w.name%](Workflow):

    def __init__(self):
        super().__init__()
        self.enablePrefetch = False
        
        # Streams
        [%for (s in w.streams) { %]
        self.[%=s.name.ftlc()%] = None
        [%}%]

        # Tasks
        [%for (t in w.tasks) {%]
        [%if (t.isPythonTask()) {%]
        self.[%=t.name.ftlc()%] = None
        [%}%]
        [%}%]
        
        # Task creation
        [%for (t in w.getWorkerTasks()){%]
        if (not '[%=t.name%]' in self.tasksToExclude):
            self.[%=t.name.ftlc()%] = [%=t.name%]()
            self.[%=t.name.ftlc()%].setWorkflow(self)
        [%}%]

    def createWorker(self):
        worker = [%=w.name%](Mode.WORKER)
        worker.setInstanceId(self.instanceId)
        return worker

    [%for (p in w.parameters) { %]
    def set[%=p.name.ftuc()%](self, [%=p.name%]):
        self.[%=p.name%] = [%=p.name%]

    def get[%=p.name.ftuc()%](self):
        return self.[%=p.name%]
        
    [%}%]

    """
     * Run with initial delay in ms before starting execution (after creating broker
     * if master)
     * 
     * @param delay
    """
    def run(self, delay=0):
        """Run with an initial delay before starting execution

        :param delay: delay in ms before this worker will start running. Defaults to 0
        :type delay: int
        """
        self.delay=delay

        try:
            self.connect()

            time.sleep(delay)

            [%for (s in w.streams) { %]
            self.[%=s.name.ftlc()%] = [%=s.name%](self, self.enablePrefetch)
            self.activeStreams.append(self.[%=s.name.ftlc()%])
            [%}%]

            if (self.isWorker()):
            [%for (t in w.getWorkerTasks()){%]
                if (not '[%=t.name%]' in self.tasksToExclude):
                    [%=t.setup()%]
            [%}%]

            time.sleep(1)
            self.controlTopic.send(ControlSignal(ControlSignals.WORKER_ADDED, self.getName()))
        except Exception as e:
            traceback.print_exc()
            print(e)

    [%for (s in w.streams) { %]
    def get[%=s.name%](self):
        return self.[%=s.name.ftlc()%]
        
    [%}%]
    [%for (t in w.tasks) {%]
    def get[%=t.name%](self):
        return self.[%=t.name.ftlc()%]
        
    [%}%]

    def isEnablePrefetch(self):
        """Are tasks allowed to obtain more jobs while already executing
        :rtype: boolean
        """
        return self.enablePrefetch

    def setEnablePrefetch(self, enablePrefetch):
        self.enablePrefetch = enablePrefetch

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-name', default='[%=w.name%]Python', help='The name of the workflow')
    parser.add_argument('-master', default='localhost', help='IP of the master')
    parser.add_argument('-brokerHost', default='localhost', help='IP of the broker')
    parser.add_argument('-stomp', default=61613, help='Port to use for stomp based messages')
    parser.add_argument('-instance', default=None, help='The instance of the master (to contribute to)')
    parser.add_argument('-mode', default=Mode.WORKER, help='Must be master_bare, master or worker')
    
    parsedArgs = parser.parse_args(sys.argv[1:len(sys.argv)])
    
    app = [%=w.name%]()
    app.name = parsedArgs.name
    app.master = parsedArgs.master
    app.brokerHost = parsedArgs.brokerHost
    app.stomp = parsedArgs.stomp
    app.instanceId = parsedArgs.instance
    app.mode = parsedArgs.mode
    app.run();
    
[%
operation Task isPythonTask(){
    return self.languages.exists(l | l.name.toLowerCase()== "python");
}

operation Workflow getMasterTasks() {
    return self.tasks.select(t | t.isPythonTask() and (t.isKindOf(Source) or t.isKindOf(Sink) or t.masterOnly));
}

operation Workflow getWorkerTasks() {
    return self.tasks.excludingAll(self.getMasterTasks()).select(t | t.isPythonTask());
}

@template
operation Task setup() {%]
    self.[%=self.name.ftlc()%].setResultsTopic(self.resultsTopic);
    [%for (i in self.input) { %]
    self.[%=i.name.ftlc()%].addConsumer(self.[%=self.name.ftlc()%], "[%=self.name%]");            
    [%}%]
    [%for (o in self.output) { %]
    self.[%=self.name.ftlc()%].set[%=o.name%](self.[%=o.name.ftlc%]);
    [%}%]
[%}
%]