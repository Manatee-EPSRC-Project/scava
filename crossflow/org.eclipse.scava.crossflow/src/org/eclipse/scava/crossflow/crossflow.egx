rule Workflow2Class 
	transform w : Workflow {
	
	template : "workflow2class.egl"
	
	target : w.getPath() + w.name + ".java"
}

rule Workflow2AbstractGraph 
	transform w : Workflow {
	
	template : "workflow2abstractGraph.egl"
	
	target : "experiment/abstract.graph"
}

rule GenerateExperimentXML
	transform w : Workflow {
	
	template : "generateExperimentXML.egl"
	
	target : "experiment/experiment.xml"
}

rule Type2Class 
	transform t : Type {
	
	guard : t.impl.isUndefined() //and s.csvFile.isUndefined()
	
	template : "type2class.egl"
	
	target : t.getPath() + t.name + ".java"
}

rule CsvSource2Source
	transform t : CsvSource {

	parameters : Map{"w" = t.eContainer()}

	template : "csvsource2source.egl"
	
	target : t.getImplPath() + t.name + ".java"	
	
	overwrite : false
}

rule CsvSink2Sink
	transform t : CsvSink {

	parameters : Map{"w" = t.eContainer()}

	template : "csvsink2sink.egl"
	
	target : t.getImplPath() + t.name + ".java"	
	
	overwrite : false
}

@greedy
rule CommitmentTask2BaseClass 
	transform t : CommitmentTask {
	
	guard : not t.language.isDefined() or t.language.name=="Java"	
	
	parameters : Map{"w" = t.eContainer()}
	
	template : "commitmenttask2baseclass.egl"
	
	target : t.getPath() + "Commitment" + t.name + "Base.java"	
}

@greedy
rule OpinionatedTask2BaseClass 
	transform t : OpinionatedTask {
	
	guard : not t.language.isDefined() or t.language.name=="Java"	
	
	parameters : Map{"w" = t.eContainer()}
	
	template : "opinionatedtask2baseclass.egl"
	
	target : t.getPath() + "Opinionated" + t.name + "Base.java"	
}

@greedy
rule Task2BaseClass 
	transform t : Task {
	
	guard : not t.language.isDefined() or t.language.name=="Java"	
	
	parameters : Map{"w" = t.eContainer()}
	
	template : "task2baseclass.egl"
	
	target : t.getPath() + t.name + "Base.java"	
}

@greedy
rule Task2ImplClass 
	transform t : Task {
	
	guard : not t.language.isDefined() or t.language.name=="Java"	
		
	parameters : Map{"w" = t.eContainer()}
	
	template : "task2implclass.egl"
	
	target : t.getImplPath() + t.name + ".java"
	
	overwrite : false
}

@greedy
rule Steam2Class 
	transform s : Stream {
	
	parameters : Map{"w" = s.eContainer()}
	
	template : "stream2class.egl"
	
	target : s.getPath() + s.name + ".java"
}

@greedy
rule Steam2Consumer 
	transform s : Stream {
	
	template : "stream2consumer.egl"
	
	target : s.getPath() + s.name + "Consumer.java"
}

operation Any getPath() {
	var workflow = self;
	if (not self.isTypeOf(Workflow)) workflow = self.eContainer();
	
	var lang = workflow.languages.select(l|l.name=="Java");
	var langExists = not lang.isEmpty;

	var path = "";
	
	if(langExists) path = lang.first.genOutputFolder+"/";
	else path = "src-gen/";
	
	if(langExists) path = path + lang.first.package.replaceAll("\\.", "/") + "/";
	else path = path + workflow.name.ftlc.replaceAll("\\.", "/") + "/";

	return path;
}

operation Any getImplPath() {
	var workflow = self;
	if (not self.isTypeOf(Workflow)) workflow = self.eContainer();
	
	var lang = workflow.languages.select(l|l.name=="Java");
	var langExists = not lang.isEmpty;

	var path = "";
	
	if(langExists) path = lang.first.outputFolder+"/";
	else path = "src/";
	
	if(langExists) path = path + lang.first.package.replaceAll("\\.", "/") + "/";
	else path = path + workflow.name.ftlc.replaceAll("\\.", "/") + "/";

	return path;
}