import "utils.egx";

rule Workflow2App
	transform w : Workflow {
	
	parameters : Map{"w" = w,"package" = w.getPackageName()}
	
	template : "workflow2app.egl"
	
	target : w.getImplPath() + w.name + "App.java"

	overwrite : false
}

rule Config2ConfigSource
	transform t : Type {
	
	guard : t.eContainer().tasks.collect(c|c.configurations).flatten.asSet().contains(t)
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName(), "t" = t.createSource()}
	
	template : "task2baseclass.egl"
	
	target : t.getPath() + t.name + ".java"
}

rule Workflow2Class 
	transform w : Workflow {
	
	parameters : Map{"w" = w,"package" = w.getPackageName()}
	
	template : "workflow2class.egl"
	
	target : w.getPath() + w.name + ".java"
}

rule GenerateExperimentXML
	transform w : Workflow {
	
	parameters : Map{"w" = w,"package" = w.getPackageName()}
	
	template : "generateExperimentXML.egl"
	
	target : "experiment/experiment.xml"
	
	overwrite : false
}

rule Type2Class 
	transform t : Type {
		
	guard : t.impl.isUndefined() //and s.csvFile.isUndefined()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "type2class.egl"
	
	target : t.getPath() + t.name + ".java"
}

rule CsvSource2Source
	transform t : CsvSource {

	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}

	template : "csvsource2source.egl"
	
	target : t.getImplPath() + t.name + ".java"	
	
	overwrite : false
}

rule CsvSink2Sink
	transform t : CsvSink {

	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}

	template : "csvsink2sink.egl"
	
	target : t.getImplPath() + t.name + ".java"	
	
	overwrite : false
}

@greedy
rule CommitmentTask2BaseClass 
	transform t : CommitmentTask {
	
	guard : t.isJavaTask()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "commitmenttask2baseclass.egl"
	
	target : t.getPath() + "Commitment" + t.name + "Base.java"	
}

@greedy
rule OpinionatedTask2BaseClass 
	transform t : OpinionatedTask {
	
	guard : t.isJavaTask()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "opinionatedtask2baseclass.egl"
	
	target : t.getPath() + "Opinionated" + t.name + "Base.java"	
}

@greedy
rule Task2BaseClass 
	transform t : Task {
	
	guard : t.isJavaTask()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "task2baseclass.egl"
	
	target : t.getPath() + t.name + "Base.java"	
}

@greedy
rule Task2ImplClass 
	transform t : Task {
	
	guard :	t.isJavaTask() and not t.isTypeOf(ScriptedTask)
		
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "task2implclass.egl"
	
	target : t.getImplPath() + t.name + ".java"
	
	overwrite : false
}

@greedy
rule Steam2Class 
	transform s : Stream {
	
	parameters : Map{"w" = s.eContainer(),"package" = s.eContainer().getPackageName()}
	
	template : "stream2class.egl"
	
	target : s.getPath() + s.name + ".java"
}

@greedy
rule Steam2Consumer 
	transform s : Stream {
	
	parameters : Map{"w" = s.eContainer(),"package" = s.eContainer().getPackageName()}
	
	template : "stream2consumer.egl"
	
	target : s.getPath() + s.name + "Consumer.java"
}

//

