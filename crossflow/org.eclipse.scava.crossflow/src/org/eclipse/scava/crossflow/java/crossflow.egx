import "../util.eol";

rule Workflow2App
	transform w : Workflow {
	
	parameters : Map{"w" = w,"package" = w.getPackageName()}
	
	template : "workflow2app.egl"
	
	target : w.getImplPath() + w.name + "App.java"

	overwrite : false
}

rule Config2ConfigSource
	transform t : Type {
	
	guard : t.eContainer().tasks.collect(c|c.configurations).flatten.asSet().contains(t)
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName(), "t" = t.createSource()}
	
	template : "task2baseclass.egl"
	
	target : t.getPath() + t.name + ".java"
}

rule Workflow2Class 
	transform w : Workflow {
	
	parameters : Map{"w" = w,"package" = w.getPackageName()}
	
	template : "workflow2class.egl"
	
	target : w.getPath() + w.name + ".java"
}

rule Type2Class 
	transform t : Type {
		
	guard : t.impl.isUndefined() //and s.csvFile.isUndefined()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "type2class.egl"
	
	target : t.getPath() + t.name + ".java"
}

rule CsvSource2Source
	transform t : CsvSource {

	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}

	template : "csvsource2source.egl"
	
	target : t.getImplPath() + t.name + ".java"	
	
	overwrite : false
}

rule CsvSink2Sink
	transform t : CsvSink {

	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}

	template : "csvsink2sink.egl"
	
	target : t.getImplPath() + t.name + ".java"	
	
	overwrite : false
}

@greedy
rule CommitmentTask2BaseClass 
	transform t : CommitmentTask {
	
	guard : t.isJavaTask()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "commitmenttask2baseclass.egl"
	
	target : t.getPath() + "Commitment" + t.name + "Base.java"	
}

@greedy
rule OpinionatedTask2BaseClass 
	transform t : OpinionatedTask {
	
	guard : t.isJavaTask()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "opinionatedtask2baseclass.egl"
	
	target : t.getPath() + "Opinionated" + t.name + "Base.java"	
}

@greedy
rule Task2BaseClass 
	transform t : Task {
	
	guard : t.isJavaTask()
	
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "task2baseclass.egl"
	
	target : t.getPath() + t.name + "Base.java"	
}

@greedy
rule Task2ImplClass 
	transform t : Task {
	
	guard :	t.isJavaTask() and not t.isTypeOf(ScriptedTask)
		
	parameters : Map{"w" = t.eContainer(),"package" = t.eContainer().getPackageName()}
	
	template : "task2implclass.egl"
	
	target : t.getImplPath() + t.name + ".java"
	
	overwrite : false
}

@greedy
rule Steam2Class 
	transform s : Stream {
	
	parameters : Map{"w" = s.eContainer(),"package" = s.eContainer().getPackageName()}
	
	template : "stream2class.egl"
	
	target : s.getPath() + s.name + ".java"
}

@greedy
rule Steam2Consumer 
	transform s : Stream {
	
	parameters : Map{"w" = s.eContainer(),"package" = s.eContainer().getPackageName()}
	
	template : "stream2consumer.egl"
	
	target : s.getPath() + s.name + "Consumer.java"
}

//

operation Type createSource(){
	var source = new Source;
	self.eContainer.tasks.add(source);
	self.eContainer.types.add(self);
	source.name = self.name+"ConfigSource";
	var configTopic = new Topic;
	self.eContainer.streams.add(configTopic);
	configTopic.name = self.name+"Topic";
	configTopic.type = self;
	source.output.add(configTopic);
	//self.findEligibleConfigurableTasks().input.add(configTopic);
	for(t in self.findEligibleConfigurableTasks()){
		t.input.add(configTopic);
	}		
	return source;	
}

operation Type findEligibleConfigurableTasks(){
	return Task.all.select(t|t.configurations.exists(c|c=self));
}

operation Any getPath() {
	var workflow = self;
	if (not self.isTypeOf(Workflow)) workflow = self.eContainer();
	
	var lang = workflow.languages.select(l|l.isJava());
	var langExists = not lang.isEmpty;

	var path = "src-gen/";
	
	if (langExists and lang.first.genOutputFolder.isDefined()) {
		path = lang.first.genOutputFolder + "/";
	}
	
	path = path + workflow.getPackageName().replaceAll("\\.", "/") + "/";
	
	return path;
}

operation Any getImplPath() {
	var workflow = self;
	if (not self.isTypeOf(Workflow)) workflow = self.eContainer();
	
	var lang = workflow.languages.select(l|l.isJava());
	var langExists = not lang.isEmpty;
		
	var path = "src/";
		
	if (langExists and lang.first.outputFolder.isDefined()) {
		path = lang.first.outputFolder + "/";
	}
	
	path = path + workflow.getPackageName().replaceAll("\\.", "/") + "/";

	return path;
}

operation Task isJavaTask() {
	return self.languages.isEmpty() or self.languages.exists(l | l.isJava());
}
