package [%=w.package%];

import org.eclipse.scava.crossflow.runtime.FailedJob;
import org.eclipse.scava.crossflow.runtime.Task;
import org.eclipse.scava.crossflow.runtime.Workflow;

import javax.jms.Message;

public abstract class [%=t.name%]Base extends Task [%if(t.input.notEmpty()){%] implements [%=t.input.collect(s|s.name + "Consumer").concat(",")%][%}%]{
		
	protected [%=w.name%] workflow;
	
	public void setWorkflow([%=w.name%] workflow) {
		this.workflow = workflow;
	}
	
	public Workflow getWorkflow() {
		return workflow;
	}
	
	public String getId(){
		return "[%=t.name%]:"+workflow.getName();
	}
	
	[%for (s in t.output) { %]
	protected [%=s.name%] [%=s.name.ftlc()%];
	
	protected void set[%=s.name%]([%=s.name%] [%=s.name.ftlc()%]) {
		this.[%=s.name.ftlc()%] = [%=s.name.ftlc()%];
	}
	
	private [%=s.name%] get[%=s.name%]() {
		return [%=s.name.ftlc()%];
	}
	
	public void sendTo[%=s.name%]([%=s.type.name%] [%=s.type.name.ftlc()%]) {
		[%=s.type.name.ftlc()%].setCacheable(this.cacheable);
		get[%=s.name%]().send([%=s.type.name.ftlc()%], this.getClass().getName());
	}
	
	[%}%]
	
	[%for (s in t.input) { %]
	@Override
	public final void consume[%=s.name%]WithNotifications([%=s.type.name%] [%=s.type.name.ftlc()%], Message m, boolean ack) {
		try {
			workflow.setTaskInProgess(this);
			consume[%=s.name%]([%=s.type.name.ftlc()%]);
		}
		catch (Exception ex) {
			try {
				[%=s.type.name.ftlc()%].setFailures([%=s.type.name.ftlc()%].getFailures()+1);
				workflow.getFailedJobsQueue().send(new FailedJob([%=s.type.name.ftlc()%], ex, workflow.getName(), "[%=t.name%]"));
			} catch (Exception e) {
				workflow.reportInternalException(e);
			}
		}
		finally {
			try {
				if(ack) 
					m.acknowledge();
				workflow.setTaskWaiting(this);
			} catch (Exception e) {
				workflow.reportInternalException(e);
			}
		}
	}
	
	public abstract void consume[%=s.name%]([%=s.type.name%] [%=s.type.name.ftlc()%]) throws Exception;
	[%}%]	
	
	[%if (t.isKindOf(Source)){%]
	public abstract void produce() throws Exception;
	[%}%]
	
}