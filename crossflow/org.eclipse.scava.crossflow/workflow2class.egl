package [%=w.package%];

import java.util.ArrayList;
import java.util.Collection;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;

import org.apache.activemq.broker.BrokerService;
import org.eclipse.scava.crossflow.runtime.utils.ControlSignal;
import org.eclipse.scava.crossflow.runtime.utils.ControlSignal.ControlSignals;
import org.eclipse.scava.crossflow.runtime.Workflow;
import org.eclipse.scava.crossflow.runtime.Mode;

public class [%=w.name%] extends Workflow {

	public static [%=w.name%] run(String[] args) throws Exception {
		[%=w.name%] throwAway = new [%=w.name%]();
		new JCommander(throwAway, args);
		[%=w.name%] app = new [%=w.name%](throwAway.getMode(), throwAway.isCreateBroker());
		new JCommander(app, args);
		app.run();
		return app;
	}
	
	public static void main(String[] args) throws Exception {
		run(args);
	}
	
	
	public [%=w.name%] createWorker() {
		[%=w.name%] worker = new [%=w.name%](Mode.WORKER);
		worker.setInstanceId(instanceId);
		return worker;
	}
	
	[%for (p in w.parameters) { %]
	@Parameter(names = { "-[%=p.name%]"}, description = "[%=p.name%] workflow parameter")
	protected [%=p.type%] [%=p.name%];
	
	public void set[%=p.name.ftuc()%]([%=p.type%] [%=p.name%]) {
		this.[%=p.name%] = [%=p.name%];
	}
	
	public [%=p.type%] get[%=p.name.ftuc()%]() {
		return [%=p.name%];
	}
	[%}%]
	
	// streams
	[%for (s in w.streams) { %]
	protected [%=s.name%] [%=s.name.ftlc()%];
	[%}%]
	
	// tasks
	[%for (t in w.tasks) {%]
	protected [%=t.name%] [%=t.name.ftlc()%];
	[%}%]

	public [%=w.name%]() {
		this(Mode.MASTER, true);
	}
	
	public [%=w.name%](Mode mode) {
		this(mode, true);
	}
	
	public [%=w.name%](Mode mode, boolean createBroker) {
		super();
			
		this.createBroker = createBroker;	
			
		this.name = "[%=w.name%]";
		this.mode = mode;
		
		if (isMaster()) {
		[%for (t in w.getMasterTasks()){%]
		[%=t.name.ftlc()%] = new [%=t.name%]();
		[%=t.name.ftlc()%].setWorkflow(this);
		[%}%]
		}
		
		if (isWorker()) {
		[%for (t in w.getWorkerTasks()){%]
			if (!tasksToExclude.contains("[%=t.name%]")) {
				[%=t.name.ftlc()%] = new [%=t.name%]();
				[%=t.name.ftlc()%].setWorkflow(this);
			}
		[%}%]
		}

	}
	
	/**
	 * Run with initial delay in ms before starting execution (after creating broker
	 * if master)
	 * 
	 * @param delay
	 */
	@Override
	public void run(int delay) throws Exception {
	
	this.delay=delay;

	try {
					
		if (isMaster()) {
			if (createBroker) {
				brokerService = new BrokerService();
				brokerService.setUseJmx(true);
				brokerService.addConnector(getBroker());
				brokerService.start();
			}
		}

		connect();

		Thread.sleep(delay);
		
		[%for (s in w.streams) { %]
		[%=s.name.ftlc()%] = new [%=s.name%]([%=w.name%].this, enablePrefetch);
		activeStreams.add([%=s.name.ftlc()%]);
		[%}%]
		
			if (isMaster()) {
			[%for (t in w.getMasterTasks()){%]
				[%=t.setup()%]
			[%}%]
			}
			
			if (isWorker()) {
			[%for (t in w.getWorkerTasks()){%]
				if (!tasksToExclude.contains("[%=t.name%]")) {
					[%=t.setup()%]
				}
			[%}%]
			}
			
			if (isMaster()){
			[%for (t in w.tasks.select(t|t.isKindOf(Source))){%]
				// run all sources in parallel threads
				new Thread(new Runnable() {

					@Override
					public void run() {
						try {
							setTaskInProgess([%=t.name.ftlc()%]);
							[%=t.name.ftlc()%].produce();
							setTaskWaiting([%=t.name.ftlc()%]);
						} catch (Exception ex) {
							reportInternalException(ex);
							terminate();
						}
					}
				}).run();	
			[%}%]
			}
				
			// delay non-master connections to allow master to create the relevant listeners
			// (in a multi-threaded parallel execution) to facilitate termination, by
			// re-sending worker_added message
			if (!isMaster()) {
				Thread.sleep(1000);
				controlTopic.send(new ControlSignal(ControlSignals.WORKER_ADDED, getName()));
			}	
					
		} catch (Exception e) {
			e.printStackTrace();
		}
	}				
	
	[%for (s in w.streams) { %]
	public [%=s.name%] get[%=s.name%]() {
		return [%=s.name.ftlc()%];
	}
	[%}%]
	
	[%for (t in w.tasks) {%]
	public [%=t.name%] get[%=t.name%]() {
		return [%=t.name.ftlc()%];
	}
	[%}%]

	/**
	* Sets whether tasks are able to obtain more jobs while they are in the middle of processing one already
	*/
	private boolean enablePrefetch = false;
	
	public boolean isEnablePrefetch() {
		return enablePrefetch;
	}

	public void setEnablePrefetch(boolean enablePrefetch) {
		this.enablePrefetch = enablePrefetch;
	}
	
}	
[%
operation Workflow getMasterTasks() {
	return self.tasks.select(t | t.isKindOf(Source) or t.isKindOf(Sink) or t.masterOnly);
}

operation Workflow getWorkerTasks() {
	return self.tasks.excludingAll(self.getMasterTasks());
}

@template
operation Task setup() {%]
	[%=self.name.ftlc()%].setResultsTopic(resultsTopic);
	[%for (i in self.input) { %]
	[%=i.name.ftlc()%].addConsumer([%=self.name.ftlc()%], "[%=self.name%]");			
	[%}%]
	[%for (o in self.output) { %]
	[%=self.name.ftlc()%].set[%=o.name%]([%=o.name.ftlc%]);
	[%}%]
[%}
%]