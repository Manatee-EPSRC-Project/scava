package [%=w.package%];

import java.util.LinkedList;
import java.util.Collection;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;

import org.apache.activemq.broker.BrokerService;
import org.eclipse.scava.crossflow.runtime.Workflow;
import org.eclipse.scava.crossflow.runtime.Cache;
import org.eclipse.scava.crossflow.runtime.Mode;
import org.eclipse.scava.crossflow.runtime.Task;
import org.eclipse.scava.crossflow.runtime.utils.TaskStatus;
import org.eclipse.scava.crossflow.runtime.permanentqueues.*;



public class [%=w.name%] extends Workflow {
	
	public static void main(String[] args) throws Exception {
		[%=w.name%] app = new [%=w.name%]();
		new JCommander(app, args);
		app.run();
	}
	
	[%for (p in w.parameters) { %]
	@Parameter(names = { "-[%=p.name%]"}, description = "[%=p.name%] workflow parameter")
	protected [%=p.type%] [%=p.name%];
	
	public void set[%=p.name.ftuc()%]([%=p.type%] [%=p.name%]) {
		this.[%=p.name%] = [%=p.name%];
	}
	
	public [%=p.type%] get[%=p.name.ftuc()%]() {
		return [%=p.name%];
	}
	[%}%]
	
	// streams
	[%for (s in w.streams) { %]
	protected [%=s.name%] [%=s.name.ftlc()%];
	[%}%]
	
	private boolean createBroker = true;
	
	// tasks
	[%for (t in w.tasks) {%]
	protected [%=t.name%] [%=t.name.ftlc()%];
	[%}%]
	
	// excluded tasks from workers
	protected Collection<String> tasksToExclude = new LinkedList<String>();
	
	public void excludeTasks(Collection<String> tasks){
		tasksToExclude = tasks;
	}
	
	public [%=w.name%]() {
		super();
		this.name = "[%=w.name%]";
	}
	
	public void createBroker(boolean createBroker) {
		this.createBroker = createBroker;
	}
	
	/**
	 * Run with initial delay in ms before starting execution (after creating broker
	 * if master)
	 * 
	 * @param delay
	 */
	@Override
	public void run(int delay) throws Exception {
	
		new Thread(new Runnable() {

			@Override
			public void run() {

				try {
	
					if (isMaster()) {
					if(isCacheEnabled())
						cache = new Cache([%=w.name%].this);
						if (createBroker) {
							brokerService = new BrokerService();
							brokerService.setUseJmx(true);
							brokerService.addConnector(getBroker());
							brokerService.start();
						}
					}

					connect();

					Thread.sleep(delay);
					
//TODO test of task status until it is integrated to ui
//		taskStatusPublisher.addConsumer(new TaskStatusPublisherConsumer() {
//			@Override
//			public void consumeTaskStatusPublisher(TaskStatus status) {
//				System.err.println(status.getCaller()+" : "+status.getStatus()+" : "+status.getReason());
//			}
//		});
//
					
					[%for (s in w.streams) { %]
					[%=s.name.ftlc()%] = new [%=s.name%]([%=w.name%].this);
					activeQueues.add([%=s.name.ftlc()%]);
					[%}%]
					
					[%for (t in w.tasks) {%]		
					[%if(t.masterOnly){%]
					if (isMaster()) {
					[%}%]
					[%if ( not ( t.isKindOf(Sink) or t.isKindOf(Source) ) ){%]
					if (!getMode().equals(Mode.MASTER_BARE) && !tasksToExclude.contains("[%=t.name%]")) {
					[%}%]	
					[%if(t.isKindOf(Sink)){%]
					if (isMaster()) {
					[%}%]				
					[%=t.name.ftlc()%] = new [%=t.name%]();
					[%=t.name.ftlc()%].setWorkflow([%=w.name%].this);
					[%if(t.isKindOf(Sink)){%]
					}
					[%}%]		
					[%for (i in t.input) { %]
						[%=i.name.ftlc()%].addConsumer([%=t.name.ftlc()%], [%=t.name%].class.getName());			
					[%if(t.isKindOf(Sink))%]
						[%for(incoming in t.input){%]
							[%for(task in incoming.outputOf){%]
					if([%=task.name.ftlc()%]!=null)		
						[%=task.name.ftlc()%].setResultsBroadcaster(resultsBroadcaster);
							[%}%]
						[%}%]	
					[%}%]
					[%for (o in t.output) { %]
					[%=t.name.ftlc()%].set[%=o.name%]([%=o.name.ftlc%]);
					[%}%]
					[%if ( not ( t.isKindOf(Sink) or t.isKindOf(Source) ) ){%]
					}
					else if(isMaster()){
					[%for (i in t.input) { %]
						[%=i.name.ftlc()%].addConsumer([%=t.name.ftlc()%], [%=t.name%].class.getName());			
					[%}%]
					}
					[%}%]		
					[%if(t.masterOnly){%]
					}
					[%}%]				
					[%}%]		
					if (isMaster()){
						[%for (t in w.tasks.select(t|t.isKindOf(Source))){%]
						[%=t.name.ftlc()%].produce();
						[%}%]
					}
	
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		
		}).start();
	
	}				
	
	[%for (s in w.streams) { %]
	public [%=s.name%] get[%=s.name%]() {
		return [%=s.name.ftlc()%];
	}
	[%}%]
	
	[%for (t in w.tasks) {%]
	public [%=t.name%] get[%=t.name%]() {
		return [%=t.name.ftlc()%];
	}
	[%}%]
	
	public void setTaskInProgess(Task caller) {
		taskStatusPublisher.send(new TaskStatus(TaskStatuses.INPROGRESS, caller.getId(), ""));
	}

	public void setTaskWaiting(Task caller) {
		taskStatusPublisher.send(new TaskStatus(TaskStatuses.WAITING, caller.getId(), ""));
	}

	public void setTaskBlocked(Task caller, String reason) {
		taskStatusPublisher.send(new TaskStatus(TaskStatuses.BLOCKED, caller.getId(), reason));
	}

	public void setTaskUnblocked(Task caller) {
		taskStatusPublisher.send(new TaskStatus(TaskStatuses.INPROGRESS, caller.getId(), ""));
	}

}