graph G_calculator
algorithm: layered

layered.wrapping.strategy: MULTI_EDGE
layered.nodePlacement.strategy: NETWORK_SIMPLEX
aspectRatio: 0.4 
wrapping.correctionFactor: 4.0
wrapping.additionalEdgeSpacing: 8.0
edgeRouting: SPLINES
spacing.nodeNodeBetweenLayers: 6.5 

node StreamMetadataBroadcaster {
    nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
    nodeSize.constraints: "[MINIMUM_SIZE, NODE_LABELS]"
	label "Stream Metadata Broadcaster"
    node StreamMetadataBroadcaster_FailedJobs {
        nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
        nodeSize.constraints: "[NODE_LABELS]"
        label "Failed Jobs: n/a"
    }
    node StreamMetadataBroadcaster_InternalExceptions {
        nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
        nodeSize.constraints: "[NODE_LABELS]"
        label "Exceptions: n/a"
    }
}

node T_CalculationSource {
    nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
    nodeSize.constraints: "[NODE_LABELS]"
	label "CalculationSource"
}

edge T_CalculationSource -> Q_Calculations {
    label ""
}

node Q_Calculations {
    nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
    nodeSize.constraints: "[MINIMUM_SIZE, NODE_LABELS]"
    label "Calculations"
    node Q_Calculations_SubscriberCount {
        nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
        nodeSize.constraints: "[NODE_LABELS]"
        label "Subscribers: n/a"
    }
    node Q_Calculations_InFlightCount {
        nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
        nodeSize.constraints: "[NODE_LABELS]"
        label "InFlight: n/a"
    }
}

edge Q_Calculations -> T_Calculator {
    label "Calculation(a : int, b : int, operator : String)"
}

node T_Calculator {
    nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
    nodeSize.constraints: "[MINIMUM_SIZE, NODE_LABELS]"
	label "Calculator"
}

edge T_Calculator -> Q_CalculationResults {
    label "CalculationResult(a : int, b : int, operator : String, worker : String, result : String)"
}

node Q_CalculationResults {
    nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
    nodeSize.constraints: "[MINIMUM_SIZE, NODE_LABELS]"
    label "CalculationResults"
    node Q_CalculationResults_SubscriberCount {
        nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
        nodeSize.constraints: "[NODE_LABELS]"
        label "Subscribers: n/a"
    }
    node Q_CalculationResults_InFlightCount {
        nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
        nodeSize.constraints: "[NODE_LABELS]"
        label "InFlight: n/a"
    }
}

edge Q_CalculationResults -> T_CalculationResultsSink {
    label ""
}

node T_CalculationResultsSink {
    nodeLabels.placement: "[H_CENTER, V_TOP, INSIDE]"
    nodeSize.constraints: "[MINIMUM_SIZE, NODE_LABELS]"
	label "CalculationResultsSink"
}
