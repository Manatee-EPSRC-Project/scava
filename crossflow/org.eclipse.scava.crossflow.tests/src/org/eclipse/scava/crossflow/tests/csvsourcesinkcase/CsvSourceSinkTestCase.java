package org.eclipse.scava.crossflow.tests.csvsourcesinkcase;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.UUID;

import org.apache.activemq.broker.BrokerRegistry;
import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.Test;

public class CsvSourceSinkTestCase {
	
	private final static Path ACTUAL_TEST_CASE_RESULT = Paths.get("csvs/AdditionResultsCsvSink.csv");
	private final static Path EXPECTED_TEST_CASE_RESULT = Paths.get("csvs/AdditionResultsCsvSink-expected.csv");

	private final static String BROKER_NAME = "localhost";
	private final static long SLEEP_DURATION = 1000;


	@BeforeAll
	public static void setUpBeforeClass() throws Exception {
		// clean-up file(s) generated by previous test case executions
		Files.deleteIfExists(ACTUAL_TEST_CASE_RESULT);
	}

	@AfterAll
	public static void tearDownAfterClass() throws Exception {
		// tear-down broker
		BrokerRegistry.getInstance().lookup(BROKER_NAME).stop();
	}

	@BeforeEach
	public void setUp() throws Exception {
	}

	@AfterEach
	public void tearDown() throws Exception {
	}
	
	@Test
	public void testCase() {
		
		// setup test case configuration
		BaseCase master = new BaseCase();
		master.setName("Master-"+UUID.randomUUID().toString());
		
		try {
			// run test case configuration
			master.run();
			
			// sleep / wait before test result assertion
			Thread.sleep(SLEEP_DURATION);
		
			// assert
			String expectedResult = FileUtils.readFileToString(new File(EXPECTED_TEST_CASE_RESULT.toUri()));
			String actualResult = FileUtils.readFileToString(new File(ACTUAL_TEST_CASE_RESULT.toUri())).replaceAll("(\\r)", "");
			
			//System.out.println("expectedResult="+expectedResult);
			//System.out.println("actualResult="+actualResult);
			
			assertTrue( actualResult.equals(expectedResult) );
			
		} catch (Exception e1) {
			fail("Unexpected exception occurred during test case execution.");
			e1.printStackTrace();
		}
		
	}

}
