/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 23 18:38:13 GMT 2018
 */

package org.eclipse.scava.crossflow.examples.firstcommitment.mdetech;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.eclipse.scava.crossflow.examples.firstcommitment.mdetech.CodeSearchQuery;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CodeSearchQuery_ESTest extends CodeSearchQuery_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery("");
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.new Builder("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery("Ln0i>cS&");
      String string0 = codeSearchQuery0.getQuery();
      assertEquals("Ln0i>cS&", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery("");
      String string0 = codeSearchQuery0.getQuery();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      String string0 = codeSearchQuery0.getQuery();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      // Undeclared exception!
      try { 
        codeSearchQuery_Builder0.build();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.inPath();
      assertSame(codeSearchQuery_Builder1, codeSearchQuery_Builder0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.user("~3oZ");
      assertSame(codeSearchQuery_Builder0, codeSearchQuery_Builder1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.language("~3oZ");
      assertSame(codeSearchQuery_Builder1, codeSearchQuery_Builder0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.repo("~3oZ+in:file+filename:~3oZ");
      assertSame(codeSearchQuery_Builder0, codeSearchQuery_Builder1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      codeSearchQuery_Builder0.inFile();
      CodeSearchQuery codeSearchQuery1 = codeSearchQuery_Builder0.build();
      assertEquals("~3oZ+in:file", codeSearchQuery1.getQuery());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.path("~3oZ");
      assertSame(codeSearchQuery_Builder0, codeSearchQuery_Builder1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.extension("~3oZ");
      assertSame(codeSearchQuery_Builder1, codeSearchQuery_Builder0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.filename("~3oZ");
      assertSame(codeSearchQuery_Builder1, codeSearchQuery_Builder0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CodeSearchQuery codeSearchQuery0 = new CodeSearchQuery();
      CodeSearchQuery.Builder codeSearchQuery_Builder0 = codeSearchQuery0.create("~3oZ");
      CodeSearchQuery.Builder codeSearchQuery_Builder1 = codeSearchQuery_Builder0.inPathAndFile();
      assertSame(codeSearchQuery_Builder1, codeSearchQuery_Builder0);
  }
}
