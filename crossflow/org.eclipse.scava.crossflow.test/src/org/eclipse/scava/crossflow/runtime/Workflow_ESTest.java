/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 23 17:56:55 GMT 2018
 */

package org.eclipse.scava.crossflow.runtime;

import org.junit.Test;
import static org.junit.Assert.*;
import org.eclipse.scava.crossflow.runtime.Cache;
import org.eclipse.scava.crossflow.runtime.Mode;
import org.eclipse.scava.crossflow.runtime.Workflow;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Workflow_ESTest extends Workflow_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      workflow0.setName("");
      Cache cache0 = new Cache(workflow0);
      workflow0.setCache(cache0);
      assertEquals("", workflow0.getName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      workflow0.setName("kNx~");
      String string0 = workflow0.getName();
      assertEquals("kNx~", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      workflow0.name = "";
      String string0 = workflow0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      workflow0.setMode((Mode) null);
      workflow0.getMode();
      assertFalse(workflow0.isMaster());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      workflow0.setName("");
      Cache cache0 = new Cache(workflow0);
      workflow0.cache = cache0;
      workflow0.getCache();
      assertEquals("", workflow0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      boolean boolean0 = workflow0.isMaster();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      String string0 = workflow0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      Mode mode0 = Mode.WORKER;
      workflow0.setMode(mode0);
      boolean boolean0 = workflow0.isMaster();
      assertEquals(Mode.WORKER, workflow0.getMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      String string0 = workflow0.getBroker();
      assertEquals("tcp://localhost:61616", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      Mode mode0 = workflow0.getMode();
      assertEquals(Mode.MASTER, mode0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Workflow workflow0 = new Workflow();
      Cache cache0 = workflow0.getCache();
      assertNull(cache0);
  }
}
